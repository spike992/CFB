# ingame_update_setup
# This function is used to update the naval setup mid game
ingame_update_setup = {
	# Dirty UI
	if = { limit = { NOT = { has_variable = global.update_monie_ui } }
		set_variable = { global.update_monie_ui = 0 }
	}
	else = {
		add_to_variable = { global.update_monie_ui = 1 }
	}
}

# Function: refresh_gui
# Purpose: Refreshes the investment GUI
refresh_gui = {
	if = { limit = { check_variable = { global.refresh_gui = 5000 } }
		set_variable = { global.refresh_gui = 1 }
	}
	else = {
		add_to_variable = { global.refresh_gui = 1 }
	}
}

calculator_fleet_size = {

	set_variable = { number_of_ships_calculator = 0 }
	set_variable = { command_limit_calculator = 0 }
	set_variable = { capital_count_calculator = 0 }
	set_variable = { screen_count_calculator = 0 }
	set_variable = { needed_screen_count_calculator = 0 }
	set_variable = { carrier_have_count_calculator = 0 }
	set_variable = { heavy_count_calculator = 0 }
	set_variable = { needed_heavy_count_calculator = 0 }

	add_to_variable = { number_of_ships_calculator = destroyer_count_calculator }
	add_to_variable = { number_of_ships_calculator = light_cruiser_count_calculator }
	add_to_variable = { number_of_ships_calculator = heavy_cruiser_count_calculator }
	add_to_variable = { number_of_ships_calculator = battleship_count_calculator }
	add_to_variable = { number_of_ships_calculator = battlecruiser_count_calculator }
	add_to_variable = { number_of_ships_calculator = carrier_count_calculator }
	add_to_variable = { number_of_ships_calculator = shbb_count_calculator }
	add_to_variable = { number_of_ships_calculator = shcv_count_calculator }

	add_to_variable = { capital_count_calculator = heavy_cruiser_count_calculator }
	add_to_variable = { capital_count_calculator = battleship_count_calculator }
	add_to_variable = { capital_count_calculator = battlecruiser_count_calculator }
	add_to_variable = { capital_count_calculator = carrier_count_calculator }
	add_to_variable = { capital_count_calculator = shbb_count_calculator }
	add_to_variable = { capital_count_calculator = shcv_count_calculator }

	add_to_variable = { screen_count_calculator = destroyer_count_calculator }
	add_to_variable = { screen_count_calculator = light_cruiser_count_calculator }

	add_to_variable = { carrier_have_count_calculator = carrier_count_calculator }
	add_to_variable = { carrier_have_count_calculator = shcv_count_calculator }

	add_to_variable = { heavy_count_calculator = heavy_cruiser_count_calculator }
	add_to_variable = { heavy_count_calculator = battleship_count_calculator }
	add_to_variable = { heavy_count_calculator = battlecruiser_count_calculator }
	add_to_variable = { heavy_count_calculator = shbb_count_calculator }

	add_to_variable = { needed_screen_count_calculator = capital_count_calculator }
	multiply_variable = { needed_screen_count_calculator = 3 }
	# if= {
	#     limit = { has_trait = fleet_protector }
	#     multiply_variable = { 
	#         var = needed_screen_count
	#         value = 2.5
	#     }
	# }
	# else = {
	#     multiply_variable = { 
	#         var = needed_screen_count
	#         value = 3
	#     }
	# }

	add_to_variable = { needed_heavy_count_calculator = carrier_have_count_calculator }

	set_temp_variable = { command_limit_calculator_used_temp = 0 }

	# DD
	add_to_temp_variable = { command_limit_calculator_used_temp = destroyer_count_calculator }

	# LC
	set_temp_variable = { light_cruiser_count_calculator_temp = light_cruiser_count_calculator }
	multiply_temp_variable  = { light_cruiser_count_calculator_temp = 2 }
	add_to_temp_variable = { command_limit_calculator_used_temp = light_cruiser_count_calculator_temp }

	# HC
	set_temp_variable = { heavy_cruiser_count_calculator_temp = heavy_cruiser_count_calculator }
	multiply_temp_variable  = { heavy_cruiser_count_calculator_temp = 2 }
	add_to_temp_variable = { command_limit_calculator_used_temp = heavy_cruiser_count_calculator_temp }

	# Battleship
	set_temp_variable = { battleship_count_calculator_temp = battleship_count_calculator }
	multiply_temp_variable  = { battleship_count_calculator_temp = 6 }
	add_to_temp_variable = { command_limit_calculator_used_temp = battleship_count_calculator_temp }

	# Battlecruiser
	set_temp_variable = { battlecruiser_count_calculator_temp = battlecruiser_count_calculator }
	multiply_temp_variable  = { battlecruiser_count_calculator_temp = 6 }
	add_to_temp_variable = { command_limit_calculator_used_temp = battlecruiser_count_calculator_temp }

	# Carrier
	set_temp_variable = { carrier_count_calculator_temp = carrier_count_calculator }
	multiply_temp_variable  = { carrier_count_calculator_temp = 8 }
	add_to_temp_variable = { command_limit_calculator_used_temp = carrier_count_calculator_temp }

	# SHBB
	set_temp_variable = { shbb_count_calculator_temp = shbb_count_calculator }
	multiply_temp_variable  = { shbb_count_calculator_temp = 8 }
	add_to_temp_variable = { command_limit_calculator_used_temp = shbb_count_calculator_temp }

	# SHCV
	set_temp_variable = { shcv_count_calculator_temp = shcv_count_calculator }
	multiply_temp_variable  = { shcv_count_calculator_temp = 14 }
	add_to_temp_variable = { command_limit_calculator_used_temp = shcv_count_calculator_temp }

	set_variable = {command_limit_calculator = command_limit_calculator_used_temp}


	set_temp_variable = { carrier_limit_calculator_used_temp = 0 }

	
	# clear_variable = command_limit_used 
	# add_to_variable = { 
	# 	var = command_limit_used
	# 	value = command_limit_used_temp
	# }
	# if = {  
	# 	limit = { check_variable = {  command_limit_used > GLOBAL.cap } }
	# 	set_temp_variable = { 
	# 		var = penaltylevel 
	# 		value = GLOBAL.cap
	# 	}
	# 	subtract_from_temp_variable = {
	# 		var = penaltylevel
	# 		value = 5
	# 	}
	# 	add_to_temp_variable = { 
	# 		var = command_limit_penalty_calc
	# 		value = command_limit_used
	# 	}
	# 	subtract_from_temp_variable = {
	# 		var = command_limit_penalty_calc
	# 		value = penaltylevel
	# 	}
	# 	multiply_temp_variable = {
	# 		var = command_limit_penalty_calc
	# 		value = -0.01
	# 	}
	# 	add_to_variable ={
	# 		var = PREV.PREV.fleet_overstack_naval_damage_factor
	# 		value =  command_limit_penalty_calc
	# 	}
	
	# }
	
}